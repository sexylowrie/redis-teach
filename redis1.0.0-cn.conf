# Redis configuration file example
# Redis配置文件示例

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Redis默认是非守护（后台）方式运行，如果你需要的话，可以调整参数为'yes'，以守护（后台）方式启动
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# 注意以守护（后台）方式运行时，Redis将会在/var/run/redis.pid目录创建一个pid文件
daemonize no

# When run as a daemon, Redis write a pid file in /var/run/redis.pid by default.
# 当以守护（后台）方式运行时，Redis将会默认在/var/run/redis.pid目录创建一个pid文件
# You can specify a custom pid file location here.
# 你可以通过如下参数自定义pid文件路径
pidfile /var/run/redis.pid

# Accept connections on the specified port, default is 6379
# 设置接收连接的端口，默认是6379
port 6379

# If you want you can bind a single interface, if the bind option is not
# 如果你只想要接收某个地址的连接，请设置如下bind设置
# specified all the interfaces will listen for connections.
# 如果没有设置，将接收所有地址的连接
#
# bind 127.0.0.1

# Close the connection after a client is idle for N seconds (0 to disable)
# 客户端空闲时间超出 N 秒后，连接将被关闭， 设置为0则不关闭
timeout 300

# Save the DB on disk:
# 保存DB数据在磁盘上
#
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   在设置的时间周期（单位：秒），写操作超出指定的数字（包含），将触发保存DB。
#
#   In the example below the behaviour will be to save:
#   在如下示例将触发保存：
#    after 900 sec (15 min) if at least 1 key changed
#    900秒内至少1个key变化
#    after 300 sec (5 min) if at least 10 keys changed
#    300秒内至少10个key变化
#    after 60 sec if at least 10000 keys changed
#    60秒内至少10000个key
save 900 1
save 300 10
save 60 10000

# The filename where to dump the DB
# 设置DB文件名称
dbfilename dump.rdb

# For default save/load DB in/from the working directory
# 默认保存DB文件目录，加载DB目录
# Note that you must specify a directory not a file name.
# 注意必须指定的目录，而不是文件名
dir ./

# Set server verbosity to 'debug'
# 设置日志级别
# it can be one of:
# 可以是如下几种设置
#  debug (a lot of information, useful for development/testing)
#  debug （大量信息，用于开发以及测试）
#  notice (moderately verbose, what you want in production probably)
#  notice （中量信息，可以用于生产环境）
#  warning (only very important / critical messages are logged)
#  warning （少量信息，仅记录重要信息）
loglevel debug

# Specify the log file name. Also 'stdout' can be used to force
# 设置日志文件名称，也可以强制使用'stdout'
# the demon to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
# 但是在后台运行时，日志将被发送到/dev/null
logfile stdout

# Set the number of databases. The default database is DB 0, you can select
# 设置数据库数量，默认选在database是0，你可以使用select切换
# a different one on a per-connection basis using SELECT <dbid> where
# SELECT是针对每一个连接的，即每个连接都需要使用SELECT
# dbid is a number between 0 and 'databases'-1
# databases设置为-1，dbid将只能是0
databases 16

################################# REPLICATION #################################
################################# 复制 （副本） #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of
# another Redis server. Note that the configuration is local to the slave
# so for example it is possible to configure the slave to save the DB with a
# different interval, or to listen to another port, and so on.
# 主从复制，使用 slaveof 使一个Redis实例，成为另一个Redis服务的从节点。注意从节点的本地配置
# 例如：可以配置从节点不同的保存频率，监听不同的端口等等
# slaveof <masterip> <masterport>

################################## SECURITY ###################################
##################################    安全   ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
# 要求客户端在使用其他命令前先试用AUTH 来进行鉴权。这个配置在不可信的环境运行redis服务时非常有用
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
# 为了向后兼容，这应该被注释掉，因为大多数人不需要认证(例如，他们运行自己的服务器)。
# requirepass foobared

################################### LIMITS ####################################
###################################  限制  ####################################

# Set the max number of connected clients at the same time. By default there
# is no limit, and it's up to the number of file descriptors the Redis process
# is able to open. The special value '0' means no limts.
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 设置最大连接数。默认是没有限制，同时也取决于Redis进程可以开启的最大文件描述符数量。
# 设置为0，意味着没有限制。
# 一旦达到限制数量，Redis将关闭全部的新连接，发送异常'max number of clients reached'
# maxclients 128

# Don't use more memory than the specified amount of bytes.
# 设置最大内存字节数
# When the memory limit is reached Redis will try to remove keys with an
# EXPIRE set. It will try to start freeing keys that are going to expire
# in little time and preserve keys with a longer time to live.
# Redis will also try to remove objects from free lists if possible.
# 当达到内存限制时，Redis将尝试删除带有过期设置的键。它将尝试开始释放那些即将在短时间内过期的键，
# 并保留那些寿命较长的键。如果可能的话，Redis也会尝试从自由列表中移除对象。
#
# If all this fails, Redis will start to reply with errors to commands
# that will use more memory, like SET, LPUSH, and so on, and will continue
# to reply to most read-only commands like GET.
# 如果所有这些都失败了，Redis将对使用更多的内存命令开始回应错误，如SET, LPUSH，等等，
# 并将继续回应大多数只读命令，如GET。
#
# WARNING: maxmemory can be a good idea mainly if you want to use Redis as a
# 'state' server or cache, not as a real DB. When Redis is used as a real
# database the memory usage will grow over the weeks, it will be obvious if
# it is going to use too much memory in the long run, and you'll have the time
# to upgrade. With maxmemory after the limit is reached you'll start to get
# errors for write operations, and this may even lead to DB inconsistency.
# 注意！！：如果你想把Redis作为一个状态服务器或者缓存，而不是一个真正的数据库，maxmemory是一个不错的选择。
# 当Redis作为一个真正的数据库使用时，内存使用量会在几周内增长，如果从长远来看它会使用太多内存，
# 这是显而易见的，你将有时间升级。当maxmemory达到限制后，写操作就会出现错误，这甚至可能导致DB不一致。
# maxmemory <bytes>

############################### ADVANCED CONFIG ###############################
###############################     高级配置     ###############################

# Glue small output buffers together in order to send small replies in a
# single TCP packet. Uses a bit more CPU but most of the times it is a win
# in terms of number of queries per second. Use 'yes' if unsure.
# 将较小的输出缓冲区粘合在一起，以便在一个TCP包中发送较小的响应。
# 使用了更多的CPU，但大多数情况下，这在每秒查询的数量方面是胜出的。如果不确定，请使用“yes”。
glueoutputbuf yes

# Use object sharing. Can save a lot of memory if you have many common
# string in your dataset, but performs lookups against the shared objects
# pool so it uses more CPU and can be a bit slower. Usually it's a good
# idea.
# 使用对象共享。如果您的数据集中有许多公共字符串，可以节省大量内存，
# 但执行查找共享对象池，因此它使用更多的CPU，可以稍微慢一点。通常这是个好主意。
#
# When object sharing is enabled (shareobjects yes) you can use
# shareobjectspoolsize to control the size of the pool used in order to try
# object sharing. A bigger pool size will lead to better sharing capabilities.
# In general you want this value to be at least the double of the number of
# very common strings you have in your dataset.
# 当开启对象共享是，你可以使用shareobjectspoolsize来控制对象共享池大小
# 较大的共享池设置将带来更好的共享能力
# 一般来说，这个值至少是数据集中常见字符串数量的两倍
#
# WARNING: object sharing is experimental, don't enable this feature
# in production before of Redis 1.0-stable. Still please try this feature in
# your development environment so that we can test it better.
# 注意！！ 对象共享是实验性的，在Redis 1.0稳定版之前不要在生产中启用这个特性。
# 仍然请在您的开发环境中尝试这个功能，以便我们更好地测试它。
shareobjects no
shareobjectspoolsize 1024
