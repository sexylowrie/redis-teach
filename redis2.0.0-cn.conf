# Redis configuration file example
# Redis配置文件示例

# Note on units: when memory size is needed, it is possible to specifiy
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Redis默认是非守护（后台）方式运行，如果你需要的话，可以调整参数为'yes'，以守护（后台）方式启动
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# 注意以守护（后台）方式运行时，Redis将会在/var/run/redis.pid目录创建一个pid文件
daemonize no

# When running daemonized, Redis writes a pid file in /var/run/redis.pid by
# default. You can specify a custom pid file location here.
# 当以守护（后台）方式运行时，Redis将会默认在/var/run/redis.pid目录创建一个pid文件
# 你可以通过如下参数自定义pid文件路径
pidfile /var/run/redis.pid

# Accept connections on the specified port, default is 6379
# 设置接收连接的端口，默认是6379
port 6379

# If you want you can bind a single interface, if the bind option is not
# 如果你只想要接收某个地址的连接，请设置如下bind设置
# specified all the interfaces will listen for incoming connections.
# 如果没有设置，将接收所有地址的连接
#
# bind 127.0.0.1

# Close the connection after a client is idle for N seconds (0 to disable)
# 客户端空闲时间超出 N 秒后，连接将被关闭， 设置为0则不关闭
timeout 300

# Set server verbosity to 'debug'
# 设置日志级别
# it can be one of:
# 可以是如下几种设置
# debug (a lot of information, useful for development/testing)
#  debug （大量信息，用于开发以及测试）
# verbose (many rarely useful info, but not a mess like the debug level)
# verbose 许多有用的信息，但不像debug那么混乱
# notice (moderately verbose, what you want in production probably)
#  notice （中量信息，可以用于生产环境）
# warning (only very important / critical messages are logged)
#  warning （少量信息，仅记录重要信息）
loglevel verbose

# Specify the log file name. Also 'stdout' can be used to force
# 设置日志文件名称，也可以强制使用'stdout'
# the demon to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
# 注意： 如果你使用标准输出记录日志，但是在后台运行时，日志将被发送到/dev/null
logfile stdout

# Set the number of databases. The default database is DB 0, you can select
# 设置数据库数量，默认选在database是0，你可以使用select切换
# a different one on a per-connection basis using SELECT <dbid> where
# SELECT是针对每一个连接的，即每个连接都需要使用SELECT
# dbid is a number between 0 and 'databases'-1
# databases是一个0到 -1 的值
databases 16





################################ SNAPSHOTTING  #################################
################################      快照      #################################
#
# Save the DB on disk:
#
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   在设置的时间周期（单位：秒），写操作超出指定的数字（包含），将触发保存DB。
#
#   In the example below the behaviour will be to save:
#   在如下示例将触发保存：
#    after 900 sec (15 min) if at least 1 key changed
#    900秒内至少1个key变化
#    after 300 sec (5 min) if at least 10 keys changed
#    300秒内至少10个key变化
#    after 60 sec if at least 10000 keys changed
#    60秒内至少10000个key
#
#   Note: you can disable saving at all commenting all the "save" lines.
#   注意你可以禁用所有保存，注释掉所有的 "save"

save 900 1
save 300 10
save 60 10000

# Compress string objects using LZF when dump .rdb databases?
# 当使用LZF 生成.rdb数据库文件时，压缩字符串对象
# For default that's set to 'yes' as it's almost always a win.
# 默认时使用 yes，总是表现不错
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
# 你如果想节约CPU性能，你可以设置为no；但是当你有可压缩数据时，数据集可能会变得比较大
rdbcompression yes

# The filename where to dump the DB
# 设置DB文件名称
dbfilename dump.rdb

# The working directory.
# 工作目录
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
# DB文件将被用以上 dbfilename 指定的文件名称，写入该文件目录
#
# Also the Append Only File will be created inside this directory.
# AOF文件也将被在这个目录创建
#
# Note that you must specify a directory here, not a file name.
# 注意必须在这儿指定的目录，而不是文件名
dir ./

################################# REPLICATION #################################
################################# 复制 （副本） #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of
# another Redis server. Note that the configuration is local to the slave
# so for example it is possible to configure the slave to save the DB with a
# different interval, or to listen to another port, and so on.
# 主从复制，使用 slaveof 使一个Redis实例，成为另一个Redis服务的从节点。注意从节点的本地配置
# 例如：可以配置从节点不同的保存频率，监听不同的端口等等
# slaveof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the slave to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the slave request.
# 如果主服务器是密码保护的(使用下面的“requirepass”配置指令)，
# 可以告诉从服务器在启动复制同步进程之前进行身份验证，否则主服务器将拒绝从服务器的请求。
#
# masterauth <master-password>

################################## SECURITY ###################################
##################################    安全   ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
# 要求客户端在使用其他命令前先试用AUTH 来进行鉴权。这个配置在不可信的环境运行redis服务时非常有用
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
# 为了向后兼容，这应该被注释掉，因为大多数人不需要认证(例如，他们运行自己的服务器)。
#
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
# 警告：因为Redis是相当快，外部用户可以尝试高达150k的密码每秒来破解密码。
# 这意味着你应该使用一个非常强的密码，否则它会很容易被破解。
#
# requirepass foobared

################################### LIMITS ####################################
###################################  限制  ####################################

# Set the max number of connected clients at the same time. By default there
# is no limit, and it's up to the number of file descriptors the Redis process
# is able to open. The special value '0' means no limits.
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 设置最大连接数。默认是没有限制，同时也取决于Redis进程可以开启的最大文件描述符数量。
# 设置为0，意味着没有限制。
# 一旦达到限制数量，Redis将关闭全部的新连接，发送异常'max number of clients reached'
# maxclients 128

# Don't use more memory than the specified amount of bytes.
# 设置最大内存字节数
# When the memory limit is reached Redis will try to remove keys with an
# EXPIRE set. It will try to start freeing keys that are going to expire
# in little time and preserve keys with a longer time to live.
# Redis will also try to remove objects from free lists if possible.
# 当达到内存限制时，Redis将尝试删除带有过期设置的键。它将尝试开始释放那些即将在短时间内过期的键，
# 并保留那些寿命较长的键。如果可能的话，Redis也会尝试从自由列表中移除对象。
#
# If all this fails, Redis will start to reply with errors to commands
# that will use more memory, like SET, LPUSH, and so on, and will continue
# to reply to most read-only commands like GET.
# 如果所有这些都失败了，Redis将对使用更多的内存命令开始回应error，如SET, LPUSH，等等，
# 并将继续回应大多数只读命令，如GET。
#
# WARNING: maxmemory can be a good idea mainly if you want to use Redis as a
# 'state' server or cache, not as a real DB. When Redis is used as a real
# database the memory usage will grow over the weeks, it will be obvious if
# it is going to use too much memory in the long run, and you'll have the time
# to upgrade. With maxmemory after the limit is reached you'll start to get
# errors for write operations, and this may even lead to DB inconsistency.
# 注意！！：如果你想把Redis作为一个状态服务器或者缓存，而不是一个真正的数据库，maxmemory是一个不错的选择。
# 当Redis作为一个真正的数据库使用时，内存使用量会在几周内增长，如果从长远来看它会使用太多内存，
# 这是显而易见的，你将有时间升级。当maxmemory达到限制后，写操作就会出现错误，这甚至可能导致DB不一致。
# maxmemory <bytes>

############################## APPEND ONLY MODE ###############################
############################## 追加模式 ###############################

# By default Redis asynchronously dumps the dataset on disk. If you can live
# with the idea that the latest records will be lost if something like a crash
# happens this is the preferred way to run Redis. If instead you care a lot
# about your data and don't want to that a single record can get lost you should
# enable the append only mode: when this mode is enabled Redis will append
# every write operation received in the file appendonly.aof. This file will
# be read on startup in order to rebuild the full dataset in memory.
# Redis默认采用异步的dump数据集在磁盘上。如果你能接受这样的想法，在Redis发生崩溃时，最新的记录将丢失，
# 这是首选的方式运行Redis。相反，如果你很关心你的数据，不想让单个记录丢失，你应该启用append only模式:
# 当这个模式启动时，Redis将会追加每个接收到的写操作在appendonly.aof文件中。 在Redis启动时将会读取
# 改文件以实现在内存中重建全部数据集的目的。
#
# Note that you can have both the async dumps and the append only file if you
# like (you have to comment the "save" statements above to disable the dumps).
# Still if append only mode is enabled Redis will load the data from the
# log file at startup ignoring the dump.rdb file.
# 注意：你可以同时开启 异步dump .rdb 和 aof ;但是Redis会在启动时忽略 dump.rdb文件，继续从日志.aof文件中
# 文件中加载数据
#
# IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append
# log file in background when it gets too big.
# # 重要： 确认 BGREWRITEAOF 了解日志文件过大是，如何在后台重写

appendonly no

# The name of the append only file (default: "appendonly.aof")
# aof 文件名称，默认是：appendonly.aof
# appendfilename appendonly.aof

# The fsync() call tells the Operating System to actually write data on disk
# instead to wait for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
# 调用fsync()方法，告诉操作系统不需要output buffer再等待更多数据，直接写入磁盘。一些操作系统
# 将理解刷数据到磁盘，但是部分操作系统会尽快尝试
#
# Redis supports three different modes:
# Redis支持三种不同的模式：
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# no: 不调用 fsync方法, 仅交给操作系统自行切控制。迅速
# always: fsync after every write to the append only log . Slow, Safest.
# always: 每个写此写aof后，调用fsync方法，慢，但是安全
# everysec: fsync only if one second passed since the last fsync. Compromise.
# everysec: 只在距离上一次fsync过了一秒时才进行fsync，较合适
#
# The default is "everysec" that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
# 默认是 everysec 模式。通常既保证了速度有保证了安全。 决定权在于你，
# 设置为 no，在操作系统愿意时，刷写数据到磁盘。
# 设置为 always ，相较于everysec比较慢但是更加安全
# If unsure, use "everysec".
# 如果不确定，请使用"everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

################################ VIRTUAL MEMORY ###############################
################################     虚拟内存    ###############################

# Virtual Memory allows Redis to work with datasets bigger than the actual
# amount of RAM needed to hold the whole dataset in memory.
# In order to do so very used keys are taken in memory while the other keys
# are swapped into a swap file, similarly to what operating systems do
# with memory pages.
# 虚拟内存允许Redis在内存汇总加载比实际的内存加载更多的数据集
# 为了这样做，Redis将会加载非常常用的keys在内存中，不常用的keys将在swap文件中，类似于
# 操作系统的内存页
#
# To enable VM just set 'vm-enabled' to yes, and set the following three
# VM parameters accordingly to your needs.
# 开机虚拟内存，仅需要将vm-enabled 设置为yes，并且可以根据你的需求设置以下其他三个参数。

vm-enabled no
# vm-enabled yes

# This is the path of the Redis swap file. As you can guess, swap files
# can't be shared by different Redis instances, so make sure to use a swap
# file for every redis process you are running. Redis will complain if the
# swap file is already in use.
# 设置Redis 内存交换文件地址。 如你所想，swap文件不能在不同的redis实例中共享。在redis
# 进程运行的时候，确定每个进程都开启了swap file。如果交换文件已经被使用，Redis将会抱怨。
#
# The best kind of storage for the Redis swap file (that's accessed at random)
# is a Solid State Disk (SSD).
# 最好的Redis swap file 的存储方式是使用SSD 固态硬盘
#
# *** WARNING *** if you are using a shared hosting the default of putting
# the swap file under /tmp is not secure. Create a dir with access granted
# only to Redis user and configure Redis to create the swap file there.
# 警告 如果您使用的是共享主机，那么将交换文件默认放在/tmp下是不安全的。
# 创建一个目录，访问权限只授予Redis用户，并配置Redis创建交换文件。
vm-swap-file /tmp/redis.swap

# vm-max-memory configures the VM to use at max the specified amount of
# RAM. Everything that deos not fit will be swapped on disk *if* possible, that
# is, if there is still enough contiguous space in the swap file.
# vm-max-memory  设置虚拟内存可以使用的最大数量。 如果可能的话，如果交换文件中还有足够的连续空间，
# 那么所有不适合的内容都将交换到磁盘上。
#
# With vm-max-memory 0 the system will swap everything it can. Not a good
# default, just specify the max amount of RAM you can in bytes, but it's
# better to leave some margin. For instance specify an amount of RAM
# that's more or less between 60 and 80% of your free RAM.
# 使用 vm-max-memory 0 ；系统会交换一切可以交换的东西。不是一个好的默认配置，
# 只需要指定你能使用的最大内存，以字节为单位，但最好留一些空白。
# 例如，指定一个RAM的数量，大约是空闲RAM的60 - 80%。
vm-max-memory 0

# Redis swap files is split into pages. An object can be saved using multiple
# contiguous pages, but pages can't be shared between different objects.
# So if your page is too big, small objects swapped out on disk will waste
# a lot of space. If you page is too small, there is less space in the swap
# file (assuming you configured the same number of total swap file pages).
# Redis交换文件被分割成页面。一个对象可以使用多个连续的页面保存，但是页面不能在不同的对象之间共享。
# 因此，如果页面太大，那么交换到磁盘上的小对象将浪费大量空间。
# 如果页面太小，交换文件中的空间就会更少(假设您配置了相同数量的总交换文件页面)。
#
# If you use a lot of small objects, use a page size of 64 or 32 bytes.
# 如果有很多小对象，可以使用 64 或者 32 字节一个page
# If you use a lot of big objects, use a bigger page size.
# 如果有很多大对象，请设置一个大的页大小
# If unsure, use the default :)
# 如果不确定，使用默认配置
vm-page-size 32

# Number of total memory pages in the swap file.
# Given that the page table (a bitmap of free/used pages) is taken in memory,
# every 8 pages on disk will consume 1 byte of RAM.
# 交换文件的总内存页数
# 假定页表(空闲/使用页的位图)在内存中，磁盘上每8个页将消耗1个字节的RAM。
#
# The total swap size is vm-page-size * vm-pages
# 总的交换大小是 vm-page-size * vm-pages
#
# With the default of 32-bytes memory pages and 134217728 pages Redis will
# use a 4 GB swap file, that will use 16 MB of RAM for the page table.
# 默认的 32字节每页，和总页数 134217728 。Redis 将使用4GB的交换文件，
# 这将为页表使用16 MB的RAM。
#
# It's better to use the smallest acceptable value for your application,
# but the default is large in order to work in most conditions.
# 最好为您的应用程序使用最小的可接受值，但是为了满足大多数情况下，默认值设置的很大。
vm-pages 134217728

# Max number of VM I/O threads running at the same time.
# This threads are used to read/write data from/to swap file, since they
# also encode and decode objects from disk to memory or the reverse, a bigger
# number of threads can help with big objects even if they can't help with
# I/O itself as the physical device may not be able to couple with many
# reads/writes operations at the same time.
# 虚拟机同时运行的最大I/O线程数。
# 这个线程是用来读/写/交换文件中的数据,因为他们还编码和解码对象从磁盘内存或逆转,
# 更大数量的线程可以帮助大对象，即使他们不能帮助与I/O本身的物理设备
# 可能无法操作许多读/写操作在同一时间。
#
# The special value of 0 turn off threaded I/O and enables the blocking
# Virtual Memory implementation.
# 特殊值0关闭线程I/O并启用阻塞虚拟内存实现。
vm-max-threads 4

############################### ADVANCED CONFIG ###############################
###############################     高级配置     ###############################

# Glue small output buffers together in order to send small replies in a
# single TCP packet. Uses a bit more CPU but most of the times it is a win
# in terms of number of queries per second. Use 'yes' if unsure.
# 将较小的输出缓冲区粘合在一起，以便在一个TCP包中发送较小的响应。
# 使用了更多的CPU，但大多数情况下，这在每秒查询的数量方面是胜出的。如果不确定，请使用“yes”。
glueoutputbuf yes

# Hashes are encoded in a special way (much more memory efficient) when they
# have at max a given numer of elements, and the biggest element does not
# exceed a given threshold. You can configure this limits with the following
# configuration directives.
# 设置Hash的最大元素数，并且最大的元素不超过给定的阈值时，
# Hash会以一种特殊的方式进行编码(内存效率更高)。您可以使用以下配置指令配置此限制。
hash-max-zipmap-entries 64
hash-max-zipmap-value 512

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into an hash table
# that is rhashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
# 在没100毫秒的CPU时间片中使用1毫秒激活rehash，为了帮助主Redis 哈希表的rehash 。
# Redis 的Hash表实现采用懒rehash（实现参考 dict）：在rehash的过程中，越多的操作hash表，
# rehash的"步骤"将会越多。因此，如果服务器空闲，重新哈希就永远不会完成，哈希表就会使用更多的内存。
#
# The default is to use this millisecond 10 times every second in order to
# active rehashing the main dictionaries, freeing memory when possible.
# 默认情况下，每秒钟使用这个毫秒10次，以便活跃地重新散列主要字典，尽可能释放内存。
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply form time to time
# to queries with 2 milliseconds delay.
# 如果不确定：
# 使用 activerehashing no ；如果你有硬延迟要求，这在你的环境中不是一件好事，
# Redis可以以2毫秒的延迟一次又一次地回复查询。
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
# 使用 activerehashing yes 如果您没有这么严格的要求，但希望尽可能快地释放内存。

activerehashing yes

################################## INCLUDES ##################################
##################################   引入    ##################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all redis server but also need
# to customize a few per-server settings.  Include files can i#nclude
# other files, so use this wisely.
# 在这里引入一个或者多个配置文件。 如果你有标准的模板，但仍需要自定义部分server设置。引入
# 其他文件，将是明智的选择
# include /path/to/local.conf
# include /path/to/other.conf
