# Redis configuration file example
# Redis配置文件示例

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

################################## INCLUDES ##################################
##################################   引入    ##################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all redis server but also need
# to customize a few per-server settings.  Include files can i#nclude
# other files, so use this wisely.
# 在这里引入一个或者多个配置文件。 如果你有标准的模板，但仍需要自定义部分server设置。引入
# 其他文件，将是明智的选择
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
# 注意  "include" 不会为admin 或者 Redis 哨兵 的 "CONFIG REWRITE" 重写。
# 因为Redis总是使用最后处理的行作为配置指令的值，你最好把include放在这个文件的开头，
# 以避免在运行时覆盖配置更改。
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
# 如果你想重写配置项，你最好把include放在追后一行
# include /path/to/local.conf
# include /path/to/other.conf

################################ GENERAL  #####################################
################################   一般   #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Redis默认是非守护（后台）方式运行，如果你需要的话，可以调整参数为'yes'，以守护（后台）方式启动
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# 注意以守护（后台）方式运行时，Redis将会在/var/run/redis.pid目录创建一个pid文件
daemonize no

# When running daemonized, Redis writes a pid file in /var/run/redis.pid by
# default. You can specify a custom pid file location here.
# 当以守护（后台）方式运行时，Redis将会默认在/var/run/redis.pid目录创建一个pid文件
# 你可以通过如下参数自定义pid文件路径
pidfile /var/run/redis.pid

# Accept connections on the specified port, default is 6379.
# 设置接收连接的端口，默认是6379
# If port 0 is specified Redis will not listen on a TCP socket.
# 如果端口被指定为0，Redis将不会监听TCP连接
port 6379

# TCP listen() backlog.
# TCP监听积压
#
# In high requests-per-second environments you need an high backlog in order
# to avoid slow clients connections issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
# 在高并发环境中，你需要大量积压才能避免客户端连接慢的问题。
# 注意 Linux内核将静默地将其截断为/proc/sys/net/core/somaxconn的值，
# 因此请确保同时提高somaxconn和tcp_max_syn_backlog的值，以获得所需的效果。
tcp-backlog 511

# By default Redis listens for connections from all the network interfaces
# available on the server. It is possible to listen to just one or multiple
# interfaces using the "bind" configuration directive, followed by one or
# more IP addresses.
# 默认，Redis接收所有地址的请求，它也可以使用bind 配置，设置成仅仅一个或者多个地址，如下是
# 设置一个或者多个地址
# Examples:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1

# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
# 使用指定地址的配置作为Unix socket监听连接的配置项
# 没有默认值，所以没有指定时，Redis将不会监听 unix socket
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
# 客户端空闲时间超出 N 秒后，连接将被关闭， 设置为0则不关闭
timeout 300

# TCP keepalive.
# TCP 保活
#
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
# 如果非0，使用SO_KEEPALIVE 发送 TCP ACKs 到客户端，防止连接断开，有这么两个重要原因：
# 1) Detect dead peers.
# 1) 确定已消亡的连接
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
# 2) 从中间网络设备的角度，保持连接存活
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
# 在Linux环境中，指定的值（单位：秒）用于发送ACKs的时间段
# 注意 关闭连接需要双倍的该事件
# 在其他内核中，超时时间取决内核的配置
#
# A reasonable value for this option is 60 seconds.
# 较为合理的配置是60秒
tcp-keepalive 0

# Specify the server verbosity level.
# 指定日志级别
# This can be one of:
# debug (a lot of information, useful for development/testing)
#  debug （大量信息，用于开发以及测试）
# verbose (many rarely useful info, but not a mess like the debug level)
# verbose 许多有用的信息，但不像debug那么混乱
# notice (moderately verbose, what you want in production probably)
#  notice （中量信息，可以用于生产环境）
# warning (only very important / critical messages are logged)
#  warning （少量信息，仅记录重要信息）
loglevel verbose

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# 设置日志文件名称，空字符串也可以强制Redis使用标准输出
# output for logging but daemonize, logs will be sent to /dev/null
# 注意： 如果你使用标准输出记录日志，但是在后台运行时，日志将被发送到/dev/null
logfile ""

# To enable logging to the system logger, just set 'syslog-enabled' to yes,
# and optionally update the other syslog parameters to suit your needs.
# syslog-enabled no

# Specify the syslog identity.
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# syslog-facility local0

# Set the number of databases. The default database is DB 0, you can select
# 设置数据库数量，默认选在database是0，你可以使用select切换
# a different one on a per-connection basis using SELECT <dbid> where
# SELECT是针对每一个连接的，即每个连接都需要使用SELECT
# dbid is a number between 0 and 'databases'-1
# databases是一个0到 -1 的值
databases 16

################################ SNAPSHOTTING  ################################
################################      快照      ################################

# Save the DB on disk:
#
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   在设置的时间周期（单位：秒），写操作超出指定的数字（包含），将触发保存DB。
#
#   In the example below the behaviour will be to save:
#   在如下示例将触发保存：
#    after 900 sec (15 min) if at least 1 key changed
#    900秒内至少1个key变化
#    after 300 sec (5 min) if at least 10 keys changed
#    300秒内至少10个key变化
#    after 60 sec if at least 10000 keys changed
#    60秒内至少10000个key
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#   你也可以移除所有的save配置，通过天界save ""，参考如下示例：
#   save ""

save 900 1
save 300 10
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
# 默认，Redis后台保存RDB快照失败时，Redis将会停止接收写操作。
# 这将使用户意识到数据没有合理的持久化到磁盘上，否则将不会有人意识到灾难的发生
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
# 如果后台保存重新继续工作，Redis将会自动重新允许写操作
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
# 然后，如果你已经建立了恰当的方式去监控Redis Server 和持久化，你可能想禁用这个特性，这样的话
# 即使发生了磁盘问题，Redis也将会继续工作。
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# 当使用LZF 生成.rdb数据库文件时，压缩字符串对象
# For default that's set to 'yes' as it's almost always a win.
# 默认时使用 yes，总是表现不错
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
# 你如果想节约CPU性能，你可以设置为no；但是当你有可压缩数据时，数据集可能会变得比较大
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# 从版本5开始，一个CRC64的RDB校验数被放在文件的末尾
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
# 这使得该格式更能抵御损坏，但在保存和加载RDB文件时，性能会受到影响(大约10%)，
# 因此可以禁用它以获得最大的性能。
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
# RDB文件将创建0的检验数，标识这加载时跳过校验
rdbchecksum yes

# The filename where to dump the DB
# 设置DB文件名称
dbfilename dump.rdb

# The working directory.
# 工作目录
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
# DB文件将被用以上 dbfilename 指定的文件名称，写入该文件目录
#
# The Append Only File will also be created inside this directory.
# AOF文件也将被在这个目录创建
# Note that you must specify a directory here, not a file name.
# 注意必须在这儿指定的目录，而不是文件名
dir ./

################################# REPLICATION #################################
################################# 复制 （副本） #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
# 主从复制，使用slaveof 可以指定一个Redis实例作为另一个节点的从节点.有如下几点你需要知道:
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of slaves.
# 1) Redis复制是异步的，但是你可以配置当一个主节点的slave节点数少于某个数值时，停止接收写入
# 2) Redis slaves are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 2) 如果复制链接断开较短的时间，Redis从节点能够与主节点重新同步，你可以根据自己的需要设置积压值
# 3) Replication is automatic and does not need user intervention. After a
#    network partition slaves automatically try to reconnect to masters
#    and resynchronize with them.
# 3) 复制是自动的，不需要用户介入；当网络故障结束后，从节点会自动重连的朱接单，并且跟主节点保持同步
#
# slaveof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the slave to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the slave request.
# 如果主服务器是密码保护的(使用下面的“requirepass”配置指令)，
# 可以告诉从服务器在启动复制同步进程之前进行身份验证，否则主服务器将拒绝从服务器的请求。
#
# masterauth <master-password>

# When a slave loses its connection with the master, or when the replication
# is still in progress, the slave can act in two different ways:
# 当从节点失去与主节点的联系，或者复制正在进行中；从节点有两种不同的方式：
#
# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
# 1) 如果从节点 slave-serve-stale-data 设置为 yes；从节点将继续响应客户端请求，
# 如果这是第一次同步，数据集可能是空的。
#
# 2) if slave-serve-stale-data is set to 'no' the slave will reply with
#    an error "SYNC with master in progress" to all the kind of commands
#    but to INFO and SLAVEOF.
# 2) 如果slave-serve-stale-data 设置为 no；从节点将会对除了 INFO ，SLAVEOF 以外的命令
# 回复"SYNC with master in progress"
slave-serve-stale-data yes

# You can configure a slave instance to accept writes or not. Writing against
# a slave instance may be useful to store some ephemeral data (because data
# written on a slave will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
# 你可以设置从节点接收写或者不接收。在slave实例上写数据对于存储一些临时数据可能很有用
# (因为在slave实例上写的数据在与主实例重新同步后很容易被删除)，
# 但是如果客户端因为a的原因写数据，也可能会导致问题
#
# Since Redis 2.6 by default slaves are read-only.
# 从Redis2.6 默认从节点是 read-only
#
# Note: read only slaves are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only slave exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only slaves using 'rename-command' to shadow all the
# administrative / dangerous commands.
# 注意：只读从节点不是为互联网上的不可信客户端设计的。它只是一个防止误用实例的保护层。
# 在默认情况下导出所有管理命令（如配置、调试等）仍然是只读的slave。在一定程度上，
# 您可以使用“rename-command”来隐藏所有的管理/危险命令，从而提高只读奴隶的安全性。
slave-read-only yes

# Replication SYNC strategy: disk or socket.
# 复制策略：disk 或者 socket
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------
# -------------------------------------------------------
# 警告: SOCKET 复制是实验性的
# -------------------------------------------------------
#
# New slaves and reconnecting slaves that are not able to continue the replication
# process just receiving differences, need to do what is called a "full
# synchronization". An RDB file is transmitted from the master to the slaves.
# The transmission can happen in two different ways:
# 新增从节点或者从节点重新连接不能执行继续复制，需要执行全量复制，有如下两种方式
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the slaves incrementally.
# 1) Disk: 主节点会创建一个新的进程在硬盘上写RDB文件，然后将RDB文件传输给从节点
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to slave sockets, without touching the disk at all.
# 2) Socket: 主节点会创建一个新的进程通过socket传输给从节点，而不使用磁盘
#
# With disk-backed replication, while the RDB file is generated, more slaves
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once
# the transfer starts, new slaves arriving will be queued and a new transfer
# will start when the current one terminates.
# 使用磁盘支持的复制，在生成RDB文件的同时，更多的slave可以排队，
# 并在生成RDB文件的当前子服务器完成其工作后使用RDB文件服务。
# 而使用无磁盘复制，一旦传输开始，到达的新的slave将被排队，
# 当当前的salve终止时，新的传输将开始。
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple slaves
# will arrive and the transfer can be parallelized.
# 当使用socket复制时，主复制等待的可配置数量为开始传输之前的时间(以秒为单位)，
# 希望多个slave将到达并将传输并行化。
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
# 在低速磁盘和快速(大带宽)网络中，无盘复制工作得更好。
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the slaves.
# 当开启socket复制时，可以配置服务器等待的延迟，以便产生通过套接字将RDB传输到从服务器的子服务器。
#
# This is important since once the transfer starts, it is not possible to serve
# new slaves arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more slaves arrive.
# 这一点很重要，因为一旦传输开始，就不可能为到达的新从服务器提供服务，
# 这些新从服务器将排队等待下一次RDB传输，因此服务器会等待一个延迟，
# 以便让更多的从服务器到达。
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
# 延迟时间以秒为单位，缺省值为5秒。
# 要完全禁用它，只需将它设置为0秒，传输将尽快开始。
repl-diskless-sync-delay 5

# Slaves send PINGs to server in a predefined interval. It's possible to change
# this interval with the repl_ping_slave_period option. The default value is 10
# seconds.
# 从节点以一个预设的评论发送PING请求。可以通过repl_ping_slave_period参数来修改发送频率。
# 默认值是10秒钟
#
# repl-ping-slave-period 10

# The following option sets the replication timeout for:
# 设置复制超时时间将用于以下途径
#
# 1) Bulk transfer I/O during SYNC, from the point of view of slave.
# 1) 批量IO操作
# 2) Master timeout from the point of view of slaves (data, pings).
# 2) 主节点访问从节点超时
# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).
# 3) 从节点访问主节点.（回复ACK）
#
# It is important to make sure that this value is greater than the value
# specified for repl-ping-slave-period otherwise a timeout will be detected
# every time there is low traffic between the master and the slave.
# 一定要确认复制超时时间要大于主从心跳时间，否则一个时间周期内主从节点只能传输少量数据
#
# repl-timeout 60

# Disable TCP_NODELAY on the slave socket after SYNC?
#
# If you select "yes" Redis will use a smaller number of TCP packets and
# less bandwidth to send data to slaves. But this can add a delay for
# the data to appear on the slave side, up to 40 milliseconds with
# Linux kernels using a default configuration.
# 如果你配置为yes，Redis往从节点发送数据将使用较小的数据包和占用较少的带宽；但是它也可能使从节点出现延迟增加
#
# If you select "no" the delay for data to appear on the slave side will
# be reduced but more bandwidth will be used for replication.
# 如果你设置为no，数据延迟将会被减弱，相应的会占用较大的带宽；
#
# By default we optimize for low latency, but in very high traffic conditions
# or when the master and slaves are many hops away, turning this to "yes" may
# be a good idea.
# 默认是低延迟，高并发环境中设置为yes也许是个不错的选择
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates
# slave data when slaves are disconnected for some time, so that when a slave
# wants to reconnect again, often a full resync is not needed, but a partial
# resync is enough, just passing the portion of data the slave missed while
# disconnected.
# 设置复制积压大小；当从节点断开一段时间，积压是一个缓冲区，
# 为了保证从节点重新连接时，不必进行全同步，而是同步断开后遗失的一部分
#
# The bigger the replication backlog, the longer the time the slave can be
# disconnected and later be able to perform a partial resynchronization.
# 缓冲区大小越大，从节点断开时间可以越长；
#
# The backlog is only allocated once there is at least a slave connected.
# 当至少有一个从节点连接时，缓冲区才会被分配。
#
# repl-backlog-size 1mb

# After a master has no longer connected slaves for some time, the backlog
# will be freed. The following option configures the amount of seconds that
# need to elapse, starting from the time the last slave disconnected, for
# the backlog buffer to be freed.
# 当从节点与主节点超过一定时间后，缓冲区将会被释放；可以通过以下参数来设置时间；
#
# A value of 0 means to never release the backlog.
# 设置为0则表示，永远不释放。
#
# repl-backlog-ttl 3600

# The slave priority is an integer number published by Redis in the INFO output.
# It is used by Redis Sentinel in order to select a slave to promote into a
# master if the master is no longer working correctly.
# 从节点的priority是Redis在INFO输出的一个integer类型的数字
# 它是用于当主节点不能正常工作时，Redis 哨兵选举一个slave成为master
#
# A slave with a low priority number is considered better for promotion, so
# for instance if there are three slaves with priority 10, 100, 25 Sentinel will
# pick the one with priority 10, that is the lowest.
# slave的priority的值越小越优先；所以如果有三个从节点的priority分别被设置为 10, 100, 25，
# 哨兵将会选择priority是10的slave成为新的master
#
# However a special priority of 0 marks the slave as not able to perform the
# role of master, so a slave with priority of 0 will never be selected by
# Redis Sentinel for promotion.
# 特殊的priority值0，表示该slave节点不会成为master角色
#
# By default the priority is 100.
# priority的默认值是100
slave-priority 100

# It is possible for a master to stop accepting writes if there are less than
# N slaves connected, having a lag less or equal than M seconds.
# 当主节点的连接的从节点少于N时，并且从节点落后M秒时；主节点将不在接收写入操作；
#
# The N slaves need to be in "online" state.
# 需要有N个从节点在线
#
# The lag in seconds, that must be <= the specified value, is calculated from
# the last ping received from the slave, that is usually sent every second.
# 以秒为单位的延迟，必须小于等于指定的值。计算方式是上一次收到slave发送ping的时间间隔，
# 通常每秒钟发送一次
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough slaves
# are available, to the specified number of seconds.
# 这个设置将不保证N个副本节点接收写，但是将限制暴露写操作的时间窗口防止没有足够的slave节点可用
#
# For example to require at least 3 slaves with a lag <= 10 seconds use:
# 如下示例要求，至少有3个从节点在线并且落后小于等于10秒
#
# min-slaves-to-write 3
# min-slaves-max-lag 10
#
# Setting one or the other to 0 disables the feature.
# 设置为0禁用此特性
#
# By default min-slaves-to-write is set to 0 (feature disabled) and
# min-slaves-max-lag is set to 10.
# 默认min-slaves-to-write设置为0（禁用），min-slaves-max-lag默认是10

################################## SECURITY ###################################
##################################    安全   ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
# 要求客户端在使用其他命令前先试用AUTH 来进行鉴权。这个配置在不可信的环境运行redis服务时非常有用
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
# 为了向后兼容，这应该被注释掉，因为大多数人不需要认证(例如，他们运行自己的服务器)。
#
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
# 警告：因为Redis是相当快，外部用户可以尝试高达150k的密码每秒来破解密码。
# 这意味着你应该使用一个非常强的密码，否则它会很容易被破解。
#
# requirepass foobared

# Command renaming.
# 重命名命令
#
# It is possible to change the name of dangerous commands in a shared
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
# 在共享环境中重命名命令是一个危险的命令。对于实例来说，CONFIG命令可能被重命名成其他难以猜测的命令
# 所以它仍然是可用的对于一些工具，但是对于一般客户端不可用
#
# Example:
# 示例：
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into
# an empty string:
# 它也可以禁用一个命令通过重命名为空字符串
#
# rename-command CONFIG ""
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to slaves may cause problems.
# 请注意重命名命令将被记录到AOF文件中或者传输到从节点可能造成问题
#

################################### LIMITS ####################################
###################################  限制   ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
# 设置最大连接数。默认是设置为10000个客户端，然后如果Redis服务端process文件不能允许指定的最大数量，
# 将使用当前process限制数量，最小是32
#
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 一旦达到限制数量，Redis将关闭全部的新连接，发送异常'max number of clients reached'
# maxclients 10000

# Don't use more memory than the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
# 当达到内存限制时，Redis将尝试删除带有过期设置的键。它将尝试开始释放那些即将在短时间内过期的键，
# 并保留那些寿命较长的键。如果可能的话，Redis也会尝试从自由列表中移除对象。
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
# 如果Redis不能根据策略移除keys，或者策略设置为noeviction；Redis将对使用更多的内存命令开始回应error，
# 如SET, LPUSH，等等，并将继续回应大多数只读命令，如GET。
#
# This option is usually useful when using Redis as an LRU cache, or to set
# a hard memory limit for an instance (using the 'noeviction' policy).
# 当Redis使用LRU缓存，或者设置强硬的内存限制（设置noeviction策略）
#
# WARNING: If you have slaves attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the slaves are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of slaves is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
# TODO 警告：如果从节点达到一个实例的最大内存，
#
# In short... if you have slaves attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for slave
# output buffers (but this is not needed if the policy is 'noeviction').
# 简而言之...如果您的slave节点已经达到限制，建议您为maxmemory设置一个较低的限制，
# 以使系统上有一些可用的RAM用于从slave的输出缓冲区（但是如果策略为'noeviction'，则不需要这样做）。
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
# 内存策略，即Redis将如何选择淘汰，当达到maxmemory时；你可以设置一下几种：
#
# volatile-lru -> remove the key with an expire set using an LRU algorithm
# volatile-lru -> lru移除带过期时间keys
# allkeys-lru -> remove any key according to the LRU algorithm
# allkeys-lru -> lru移除任何keys
# volatile-random -> remove a random key with an expire set
# volatile-random -> 随机移除过期时间的一个key
# allkeys-random -> remove a random key, any key
# allkeys-random -> 随意移除任何一个key
# volatile-ttl -> remove the key with the nearest expire time (minor TTL)
# volatile-ttl ->  移除即将过期时间
# noeviction -> don't expire at all, just return an error on write operations
# noeviction -> 不移除
#
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
# 注意： 经过以上任何策略都没有可移除的keys时，Redis将会在写操作时返回error
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#       以下写操作: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The default is:
#
# maxmemory-policy noeviction

# LRU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. For default Redis will check five keys and pick the one that was
# used less recently, you can change the sample size using the following
# configuration directive.
# TODO LRU 和 最小TTL 算法不是
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.
#
# LRU，LFU，TTL 算法检测的样本数量
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
# 默认的Redis会保存数据在磁盘上，这种方式在需要应用中都是一种不错的方式，但是Redis进程出现问题
# 或者断电都将导致丢失几分钟的数据。
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
# AOF是一种替代的方式，它将提供更加优秀的持久化方式；
# 对于实例来说使用AOF默认的持久化策略在断点或者其他异常发生时将只丢失1秒的数据。
# 但是操作系统仍然可以正常运行。
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
# AOF和RDB持久化可以同时被应用，但是出现问题，重新启动Redis时，AOF文件将首先被加载
#
# Please check http://redis.io/topics/persistence for more information.

appendonly no

# The name of the append only file (default: "appendonly.aof")
# aof文件名

appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
# 调用fsync()方法，告诉操作系统不需要output buffer再等待更多数据，直接写入磁盘。一些操作系统
# 将理解刷数据到磁盘，但是部分操作系统会尽快尝试
#
# Redis supports three different modes:
# Redis支持三种不同的模式：
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# no: 不调用 fsync方法, 仅交给操作系统自行切控制。迅速
# always: fsync after every write to the append only log. Slow, Safest.
# always: 每个写此写aof后，调用fsync方法，慢，但是安全
# everysec: fsync only one time every second. Compromise.
# everysec: 只在距离上一次fsync过了一秒时才进行fsync，较合适
#
# The default is "everysec", as that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
# 默认是 everysec 模式。通常既保证了速度有保证了安全。 决定权在于你，
# 设置为 no，在操作系统愿意时，刷写数据到磁盘。
# 设置为 always ，相较于everysec比较慢但是更加安全
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".
# 如果不确定，请使用"everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
# 当AOF 的 fsync 策略设置为 always 或者 everysec，一个后台保存进程将进行大量的磁盘IO，
# 在一些Linux配置中，Redis可能在调用fsync上阻塞长时间。请注意，目前尚无此解决方法，
# 因为即使在其他线程中执行fsync也将阻止＃我们的同步write（2）调用。
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
# 为了减轻此问题，可以使用以下选项来防止在BGSAVE或BGREWRITEAOF正在进行时
# 在主进程中调用fsync（）。
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync none". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
# 这意味着当另一个孩子正在保存时，Redis的持久性与“ appendfsync none”相同。
# 实际上，这意味着在最坏的情况下（使用默认的Linux设置），有可能最多丢失30秒的日志。
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.
# 如果你有延迟问题，请将此配置设置为yes。如果你更加关注持久化，设置为no将是一个最安全的选择

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
# 自动重写日志文件aof文件
# 当AOF日志大小增加指定的百分比时，Redis能够自动隐式调用BGREWRITEAOF来重写日志文件。
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
# 它是这样工作的的：Redis记录最近一次重写AOF文件后的大小（如果在重启后没有发生过重写，
# 那么大小是启动时使用的文件大小）
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
# 同当前大小做比较，如果当前文件大小超过指定的比例，重写将被触发。
# 当然，你也可以针对AOF重写指定一个较小的比例值，
# 浙江有助于避免重写AOF文件，即使达到百分比增加，但它仍然很小。
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.
# 指定为0将禁用此重写特性

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
# Redis启动阶段加载的AOF数据，但是AOF文件可能是不完整的；
# 当Redis运行时突然宕机，或者挂载的ext4文件系统掉线都有可能造成AOF文件不完整
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
# 当错误发生时，Redis可以退户，或者尽可能加载更多的数据，在启动时如果发现AOF文件是损坏的，
# 可以选择如下的配置控制器行为
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
# aof-load-truncated设置为yes，Redis将尽可能多的加载数据，Redis可以继续运行；
# 设置为no，则必须要求用户使用“redis-check-aof”单元来修复AOF文件，否则无法正常运行。
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
# 注意： 如果在中间发现AOF文件已损坏，则服务器仍将退出并出现错误。
# 仅当Redis将尝试从AOF文件读取更多数据但找不到足够的字节数时，此选项才适用。
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################
################################ LUA 脚本  ###############################

# Max execution time of a Lua script in milliseconds.
# Lua脚本的最大执行时间（以毫秒为单位）
#
# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error.
# 如果达到了最大执行时间，Redis将会记录脚本在允许的最大时间后仍在在执行中，
# 并且开始答复有错误的查询
#
# When a long running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
# used to stop a script that did not yet called write commands. The second
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn't want to wait for the natural
# termination of the script.
# 当长时间运行的脚本超过了最大执行时间时，仅SCRIPT KILL和SHUTDOWN NOSAVE命令可用。
# 第一个可以用于停止尚未调用写命令的脚本。如果脚本已经发出了写命令，
# 但是用户不想等待脚本的自然终止，则第二个是关闭服务器的唯一方法。
#
# Set it to 0 or a negative value for unlimited execution without warnings.
# 设置为0或者负数将没有限制，没有警告
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however
# in order to mark it as "mature" we need to wait for a non trivial percentage
# of users to deploy it in production.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 警告 实验特性: Redis Cluster被认为是稳定的代码，但是为了将其标记为“成熟”，
# 我们需要等待不小的百分比的用户＃才能将其部署到生产环境中。
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#
# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
# 一般的Redis实例不能成为Redis Cluster 的一部分；只有节点以cluster nodes启动才可以。
# 为了将Redis实例作为Redis Cluster节点启动，请在不注释以下内容的情况下启用群集支持：
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
# 每个cluster 节点都有一个cluster配置文件。这个文件不是手动生产的，它是有Redis节点创建
# 并更新维护的。每个Redis Cluster节点都需要不能cluster 配置文件。
# 确保在同一系统上运行的实例没有个重叠的集群配置文件名。
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Most other internal time limits are multiple of the node timeout.
# 群集节点超时是一个节点必须不可达的毫秒数，以便将其视为故障状态。
# 其他大多数内部时间限制是节点超时的倍数。
# cluster-node-timeout 15000

# A slave of a failing master will avoid to start a failover if its data
# looks too old.
# 如果从节点的数据过于陈旧，那么它应该避免被选举成功master。
#
# There is no simple way for a slave to actually have a exact measure of
# its "data age", so the following two checks are performed:
# 有如下两种检查方式，确认其数据是否陈旧：
#
#
# 1) If there are multiple slaves able to failover, they exchange messages
#    in order to try to give an advantage to the slave with the best
#    replication offset (more data from the master processed).
#    Slaves will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
# 1) 如果有多个salve节点可以进行故障转移，Slave节点间将会相互通信并进行排名，
# 排名高的会优先成为Master
#
# 2) Every single slave computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the "connected" state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the slave will not try to failover
#    at all.
# 2) 比较每个单节点的Slave节点跟Master节点的交互时间；
# 上次交互时间最久远的Slave节点将不会被选举出来
#
# The point "2" can be tuned by user. Specifically a slave will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
# 第2点用户可以调整，具体来说，如果自从上一次与主服务器进行交互以来，
# 从服务器将不执行故障转移，则所经过的时间大于：
#
#   (node-timeout * slave-validity-factor) + repl-ping-slave-period
#
# So for example if node-timeout is 30 seconds, and the slave-validity-factor
# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the
# slave will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
# 举例来说如果节点的超时间是30秒，从节点的验证因子是10，且回复频率是10秒，如果这个从节点
# 与主节点断开超过310秒，那么将不会尝试执行故障转移。
#
# A large slave-validity-factor may allow slaves with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a slave at all.
# 较大的slave-validity-factor 可能会使具有旧数据的从设备进行故障转移（成为主设备），
# 而值太小则可能阻止群集完全选出一个从设备。一个大的slave-validity-factor 可能允许数据
#
# For maximum availability, it is possible to set the slave-validity-factor
# to a value of 0, which means, that slaves will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they'll always try to apply a delay proportional to their
# offset rank).
# 为了获得最大可用性，可以将slave-validity-factor 设置为0，
# 这意味着slave将始终尝试对master进行故障转移，而不管它们上次与主机交互的时间如何。
# （但是，他们将始终尝试应用与他们的偏移等级成比例的延迟）。
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
# 零是唯一能够保证当所有分区恢复正常后，群集将始终能够继续运行的值。
# cluster-slave-validity-factor 10

# Cluster slaves are able to migrate to orphaned masters, that are masters
# that are left without working slaves. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in case of failure if it has no working slaves.
# 群集slave能够迁移到孤立的master，即那些没有工作的从属服务器的主控服务器。
# 这提高了群集抵抗故障的能力，因为如果孤立的master没有可用的slave节点，
# 则在发生故障的情况下孤岛master将无法故障转移。
#
# Slaves migrate to orphaned masters only if there are still at least a
# given number of other working slaves for their old master. This number
# is the "migration barrier". A migration barrier of 1 means that a slave
# will migrate only if there is at least 1 other working slave for its master
# and so forth. It usually reflects the number of slaves you want for every
# master in your cluster.
# 仅当旧master中至少还有给定数量的其他工作slave时，slave才会迁移到孤立的master。
# 这个数字是“migration barrier” "迁移屏障"。迁移屏障为1意味着slave仅在其master
# 至少有其他1个正在工作的从属的情况下才会迁移，依此类推。
# 它通常反映出集群中每个mater所需的slave数量。
#
# Default is 1 (slaves migrate only if their masters remain with at least
# one slave). To disable migration just set it to a very large value.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production
# 默认是1 （slave迁移要求他们的主节点至少要有一个slave）。想要禁用迁移只需要设置一个非常大的值
# 设置为0只能用于调试，它是非常危险的在生产环境
#
# cluster-migration-barrier 1

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least an hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
# 默认 Redis Cluster 集群如果有hash 槽不能覆盖，它将停止接收请求。（没有可用的节点为它服务）
# 这样，如果群集部分关闭（例如，不再覆盖哈希槽的范围），则所有群集最终将变得不可用。
# 如果槽位可以重新全部覆盖，集群将自动恢复可用。
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
# 然而有时，你想要集群的能够覆盖槽位的部分子集继续工作。为了实现这个需求，仅需要将
# cluster-require-full-coverage 设置为no
#
# cluster-require-full-coverage yes

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.
# 如果想搭建你的cluster集群请阅读ttp://redis.io的文档

################################## SLOW LOG ###################################
################################## 慢日志 ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
# Redis Slow Log 是系统记录超过指定执行时间的请求。执行时间不包括I/O操作，
# 比如与客户端通信，发送响应等，但是命令执行所需要的实际时间（这是命令执行的唯一阶段，
# 在该阶段线程被阻塞并且无法同时处理其他请求）
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.
# 你可以使用两个参数配置慢日志，一个是以微秒为单位的执行时间，超过执行时间的命令被记录；
# 另一个参数是慢日志的队列长度。当一个新命令被记录时最老的一个将被从记录的队列中移除。

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
# 以下时间是以微秒为单位，所以100 0000 微秒是1秒。注意负数意味着禁用慢日志，
# 0值意味着强制记录每个命令
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
# 这个长度没有限制，请注意它将消耗内存。你可以使用 SLOWLOG RESET来回收慢日志消耗的内存
slowlog-max-len 128

################################ LATENCY MONITOR ##############################
################################ 延迟监控 ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
# Redis 延迟监控子系统为了收集与Redis实例的延迟的可能来源有关的数据，会在运行时采样不同的操作
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
# 通过LATENCY命令，该信息对可以打印图形并获取报告的用户可用。
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
# 系统仅记录在等于或大于等待latency-monitor-threshold配置指令中指定的毫秒数的时间内执行的操作。
# 将其值设置为零时，等待时间监视器将关闭
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don't have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
# 默认延迟监控是禁用的，因为大多数情况下它是不需要的如果您没有延迟问题；
# 收集数据会对性能产生影响，尽管影响很小，但是可以在大负载下进行测量
# 如果需要的话，Redis 延迟监控可以非常容易开启，
# 使用 "CONFIG SET latency-monitor-threshold <milliseconds>" 即可
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################
############################# 事件通知 ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# Redis可以将关键空间中发生的事件通知给发布/订阅客户端
# This feature is documented at http://redis.io/topics/notifications
# 此特性的相关文档在 http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
# 如果关键空间的事件通知开启，客户端对db 0 下键"foo"执行DEL操作，两个消息将会被发布
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
# 可以在一组类中选择Redis将通知的事件。每个类都由一个字符标识：
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
#
#  The "notify-keyspace-events" takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
# “ notify-keyspace-events”将由零个或多个字符组成的字符串作为参数。空字符串表示已禁用通知。
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#  示例：要启用列表事件和通用事件，请从事件名称的角度使用：
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#  示例2 ：获取订阅频道名称的过期key流
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.
# 默认情况下，所有通知都被禁用，因为大多数用户不需要此功能，并且该功能有一些开销。
# 请注意，如果您没有指定K或E中的至少一个，则不会传递任何事件。
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################
############################### 高级配置 ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
# 当哈希具有少量条目且最大条目不超过给定的阈值时，将使用内存有效数据结构对哈希进行编码。
# 可以使用以下指令配置这些阈值
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Similarly to hashes, small lists are also encoded in a special way in order
# to save a lot of space. The special representation is only used when
# you are under the following limits:
# 与哈希类似，小的list也可以使用特殊的编码以节省内存。仅当您处于以下限制时，才使用特殊数据结构：
list-max-ziplist-entries 512
list-max-ziplist-value 64

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
# Set 仅在一种情况下使用特殊的编码：当集合由字符串组成，这些字符串恰好是基数10中的整数，
# 在64位有符号整数的范围内。
# 以下配置设置设置了sets大小的限制，以便使用这种特殊的内存节省编码
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
# 同Hash 与 List 类似，zset 也使用特殊的编码以节省内存。当且仅当长度以及元素在在如下范围内使用：
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
# HyperLogLog稀疏表示形式的字节数限制。限制包含16个字节的头。
# 当使用稀疏表示的HyperLogLog超过此限制时，它将转换为密集表示。
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
# 大于16000 的值完全没有用，因为此时密集表示的存储效率更高
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
# 建议值是3000为了节省空间的编码而又不会减慢PFADD的速度，
# 使用时间复杂度O(N)的稀疏编码。如果不考虑CPU，而是空间，并且数据集是，
# 由许多基数在0-15000范围内的HyperLogLog组成，则该值可以提高到＃〜10000。
hll-sparse-max-bytes 3000

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
# 在每100毫秒CPU时间片中1毫秒用于rehash。Redis 的hash table实现是懒惰式rehash，
# 在rehash的过程中操作hash table 的次数越多，rehash 的次数就越多，所以如果Redis是空闲的
# rehash 就永远不会完成，hash table 使用的内存就越多
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
# 默认是每秒使用10毫秒的毫秒数，以便主动rehash 主字典，并在可能的情况下释放内存。
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
# 如果不确定的话：
# 使用 "activerehashing no" 在您有严格的延迟要求，并且在您的环境中，
# Redis可以不时地答复延迟2毫秒的查询不是一件好事。
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
# 使用 "activerehashing yes" 在您没有如此严格的要求，
# 但是想在可能的情况下尽快释放内存。
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
# 客户端输出缓冲区限制可用于强制断开客户端，出于某种原因没有足够快地从服务器读取数据的客户端
# （常见原因是发布/订阅客户端消费消息的速度赶不上发布者生产它们的速度）。
#
# The limit can be set differently for the three different classes of clients:
# 这个限制可以被设置成三种不同类型的客户端
#
# normal -> normal clients including MONITOR clients
# normal -> 一般客户端包含 MONITOR clients
# slave  -> slave clients
# slave  -> slave 客户端
# pubsub -> clients subscribed to at least one pubsub channel or pattern
# pubsub -> 客户端定于至少一个发布订阅渠道或者表达式
#
# The syntax of every client-output-buffer-limit directive is the following:
# 每个client-output-buffer-limit指令的语法如下：
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# 一旦达到硬限制，或者指定的秒数内（连续）达到软限制在 客户端将立即断开连接
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
# 例如：硬限制为32M，软限制为16M/ 10秒，如果输出缓冲区的大小达到32兆字节，客户端将立即断开连接；
# 但是如果客户端达到16兆字节并持续超过限制10秒钟，客户端也会被断开连接。
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
# 默认一般客户端没有限制，因为它们在不询问（以推送方式）的情况下不会接收数据，
# 但仅在请求之后，因此异步客户端可能会创建这样一种场景：请求数据的速度比其读取速度更快。
#
# Instead there is a default limit for pubsub and slave clients, since
# subscribers and slaves receive data in a push fashion.
# 而是对pubsub和slave客户端有一个默认限制，因为订阅者和slave以推送方式接收数据。
#
# Both the hard or the soft limit can be disabled by setting them to zero.
# 硬限制和软限制都可以通过设置为0来禁用
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
# Redis调用一个内部函数来执行许多后台任务，例如 在超时时关闭客户端连接，清除从未请求的过期key等。
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
# 并非所有任务都以相同的频率执行，但是Redis根据指定的“ hz”值检查要执行的任务。
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
# 默认 "hz" 设置为10。Redis闲置时提高该值将使用更多的CPU，但是同时当许多key同时到期时，
# Redis的响应速度将更快，并且可以更精确地处理超时。
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
# 范围是1到500，然后通常设置超过100不是一个好的想法。大多数用户使用默认值10，
# 且仅在要求非常低延迟的环境中才将此值提高到100。
hz 10

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
# 当重写AOF文件，如果启用了以下选项，则每生成32 MB的数据将对文件进行fsync处理。
# 想要更多地提交到磁盘，并避免大的延迟尖峰时很有用
aof-rewrite-incremental-fsync yes
